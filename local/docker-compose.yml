version: "3.9"

services:
  rabbitmq:
    container_name: at_rabbitmq
    image: "rabbitmq:management"
    ports:
      - "${RABBIGMQ_UI_PORT}:15672"  
      - "${RABBITMQ_PORT}:5672"    
    networks:
      - custom-network
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_LOGIN}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_running"]
      interval: 5s
      timeout: 10s
      retries: 20
    
  at_queue:
    container_name: at_queue
    build:
      dockerfile: ./docker_files/Dockerfile.at_queue
    command: > 
      python -m at_queue
      --host rabbitmq
      --port ${RABBITMQ_PORT}
      --login ${RABBITMQ_LOGIN}
      --password ${RABBITMQ_PASSWORD}
      --virtualhost /
    networks:
      - custom-network
    depends_on:
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ps -p $(cat /var/run/at_queue/pidfile.pid) || exit 1
      interval: 1s
      timeout: 3s
      retries: 30

  at_user_db:
    container_name: at_user_db
    image: "postgres:alpine"
    expose:
      - "${DB_PORT}"
    ports:
      - "${DB_PORT}:${DB_PORT}"  
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${DB_NAME}
    restart: unless-stopped
    networks:
      - custom-network
    healthcheck:
      test: pg_isready --dbname=${DB_NAME} --username=${DB_USER} --host=localhost --port=${DB_PORT}
      interval: 10s  
      timeout: 5s
      retries: 10 
    volumes:
      - user-postgres-data:/var/lib/postgresql/data
    command: ["postgres", "-c", "port=${DB_PORT}"]

networks:
  custom-network:
    external: true

volumes:
  user-postgres-data:
  minio-data:
